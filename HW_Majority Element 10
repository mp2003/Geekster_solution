import java.io.*;
import java.util.*;

public class Solution {
    public static String majorityElement(int[] nums) {
        int el = 0, count = 0;

        // Step 1: Find a potential majority candidate using Moore's Voting Algorithm
        for (int num : nums) {
            if (count == 0) {
                el = num;
                count = 1;
            } else if (el == num) {
                count++;
            } else {
                count--;
            }
        }

        // Step 2: Verify the candidate
        count = 0;
        for (int num : nums) {
            if (num == el) {
                count++;
            }
        }
        int majorityThreshold = (nums.length + 1) / 2; // Ceiling of N/2
        if (count < majorityThreshold) {
            return "NO MAJORITY ELEMENT";
        }

        // Step 3: Check for the greatest majority element
        int maxMajorityElement = el;
        count = 0;
        for (int num : nums) {
            if (num == el) {
                count++;
            } else {
                // Count occurrences of other potential majority elements
                int otherCount = 0;
                for (int x : nums) {
                    if (x == num) {
                        otherCount++;
                    }
                }
                // Update maxMajorityElement if another element qualifies and is greater
                if (otherCount >= majorityThreshold && num > maxMajorityElement) {
                    maxMajorityElement = num;
                }
            }
        }
        return String.valueOf(maxMajorityElement);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        System.out.print(majorityElement(arr));
    }
}
